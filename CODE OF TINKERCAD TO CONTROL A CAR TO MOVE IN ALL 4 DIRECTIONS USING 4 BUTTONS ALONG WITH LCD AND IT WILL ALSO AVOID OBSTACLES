#include <LiquidCrystal.h> // Needed for the LCD

// Distance sensor connections
const int trigPin = A1;
const int echoPin = A0;

// LCD connections
const int rs = 13, en = 12, d4 = 3, d5 = 2, d6 = 7, d7 = 6;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

// Motor connections
const int motor1Pin1 = A2; // H-Bridge1 IN1
const int motor1Pin2 = A3; // H-Bridge1 IN2
const int motor2Pin1 = 11; // H-Bridge1 IN3
const int motor2Pin2 = 10; // H-Bridge1 IN4
const int motor3Pin1 = A4; // H-Bridge2 IN1
const int motor3Pin2 = A5; // H-Bridge2 IN2
const int motor4Pin1 = 11; // H-Bridge2 IN3
const int motor4Pin2 = 10; // H-Bridge2 IN4

// Distance in cm for obstacle detection
const int distanceThreshold = 20; // Adjusted to a reasonable value

// Button connections
const int forwardButton = 9; // Changed to appropriate digital pin
const int backwardButton = 8; // Changed to appropriate digital pin
const int leftButton = 5;    // Changed to appropriate digital pin
const int rightButton = 4;   // Changed to appropriate digital pin

void setup() {
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(motor3Pin1, OUTPUT);
  pinMode(motor3Pin2, OUTPUT);
  pinMode(motor4Pin1, OUTPUT);
  pinMode(motor4Pin2, OUTPUT);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  
  pinMode(forwardButton, INPUT);
  pinMode(backwardButton, INPUT);
  pinMode(leftButton, INPUT);
  pinMode(rightButton, INPUT);

  lcd.begin(16, 2);
  Serial.begin(9600);
  lcd.print("System Ready");
}

void loop() {
  // Trigger the distance sensor
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH);
  int distance = duration * 0.0344 / 2;

  // Print the distance to Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  
  if (distance < distanceThreshold) {
    lcd.setCursor(0, 0);
    lcd.print("OBSTACLE DETECT");
    stopMotors();
    delay(1000); // Keep the obstacle alert for a while
  } 
  else {
    // Control the motors based on button input
    if (digitalRead(forwardButton) == HIGH) {
      moveForward();
      lcd.setCursor(0, 0);
      lcd.print("Moving Forward ");
    } 
    else if (digitalRead(backwardButton) == HIGH) {
      moveBackward();
      lcd.setCursor(0, 0);
      lcd.print("Moving Backward");
    } 
    else if (digitalRead(leftButton) == HIGH) {
      turnLeft();
      lcd.setCursor(0, 0);
      lcd.print("Turning Left   ");
    } 
    else if (digitalRead(rightButton) == HIGH) {
      turnRight();
      lcd.setCursor(0, 0);
      lcd.print("Turning Right  ");
    } 
    else {
      stopMotors();
      lcd.setCursor(0, 0);
      lcd.print("System Stopped ");
    }
    delay(500); // Delay to prevent excessive LCD updates
  }
}

void moveForward() {
  digitalWrite(motor1Pin1, 255);
  digitalWrite(motor1Pin2, 0);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
  digitalWrite(motor3Pin1, 255);
  digitalWrite(motor3Pin2, 0);
  digitalWrite(motor4Pin1, HIGH);
  digitalWrite(motor4Pin2, LOW);
  delay(500);
}

void moveBackward() {
  digitalWrite(motor1Pin1, 0);
  digitalWrite(motor1Pin2, 255);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
  digitalWrite(motor3Pin1, 0);
  digitalWrite(motor3Pin2, 255);
  digitalWrite(motor4Pin1, LOW);
  digitalWrite(motor4Pin2, HIGH);
  delay(500);
}

void turnLeft() {
  digitalWrite(motor1Pin1, 0);
  digitalWrite(motor1Pin2, 0);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
  digitalWrite(motor3Pin1, 0);
  digitalWrite(motor3Pin2, 0);
  digitalWrite(motor4Pin1, HIGH);
  digitalWrite(motor4Pin2, LOW);
  delay(500);
}

void turnRight() {
  digitalWrite(motor1Pin1, 255);
  digitalWrite(motor1Pin2, 0);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
  digitalWrite(motor3Pin1, 255);
  digitalWrite(motor3Pin2, 0);
  digitalWrite(motor4Pin1, LOW);
  digitalWrite(motor4Pin2, LOW);
  delay(500);
}

void stopMotors() {
  digitalWrite(motor1Pin1, 0);
  digitalWrite(motor1Pin2, 0);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
  digitalWrite(motor3Pin1, 0);
  digitalWrite(motor3Pin2, 0);
  digitalWrite(motor4Pin1, LOW);
  digitalWrite(motor4Pin2, LOW);
  delay(500);
}
